{"version":3,"sources":["index.js","reportWebVitals.js","serviceWorker.js"],"names":["lon","lat","mapboxgl","accessToken","Application","props","state","lng","zoom","thread","map","Map","container","this","mapContainer","style","center","cleanUp","txt","keepLine","getLine","removeTopLine","line","includes","substring","getDistance","str","Math","sqrt","pow","getCenter","split","grabFeedJSON","link","$","getJSON","dat","on","setState","toFixed","getZoom","strtemp","subreddit_link","then","json_data","each","data","children","key","marker","JSON","stringify","title","url","author","selftext","console","log","new_json","eval","marker_previews","i","el","document","createElement","className","parsed","mark","Marker","tempp","toString","id","innerHTML","target","onclick","updateSelectedMarker","tempp2","appendChild","setLngLat","setPopup","Popup","offset","setDOMContent","addTo","markerpost","grabMarkerJSON","sortObject","obj","temp","keys","push","index","sort","authorLine","removeSpaces","join","slice","bodyLine","undefined","retValidLines","iArr","lelem","length","removeComma","shift","temd","unshift","jsonSectionSelectToArr","json_formatted_string","n","countSpaces","hrTag","thiccness","commentsArrToHTMLArr","arr","concat","jsonToString","json","fullHTML","body","getElementById","popUpCal","html","alert","window","open","innerText","newMarkerCoord","dumpsterName","dumpsterComment","newMarkerBtn","sidebarStyle","getElementsByClassName","popup","addEventListener","isDraggable","getLngLat","setDraggable","setHTML","togglePopup","remove","location","reload","draggable","ref","React","Component","ReactDOM","render","reportWebVitals","serviceWorker","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","hostname","match","unregister","navigator","ready","registration","catch","error","message"],"mappings":"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","file":"static/js/main.ff545621.chunk.js","sourcesContent":["/*\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n*/\n\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport mapboxgl from 'mapbox-gl';\nimport $ from 'jquery'; \n//import mapboxgl from 'mapbox-gl'; // or \"const mapboxgl = require('mapbox-gl');\"\n\n\n//random \nvar lon = -78.8359;\nvar lat = 35.7814;\nmapboxgl.accessToken = 'pk.eyJ1Ijoic21pdGhrcjYiLCJhIjoiY2s1eng5cXhkMDBqYzNrbGlxY2llamwzYiJ9.EiSYrIube_whxrve-t_47Q';\nclass Application extends React.Component {\n  \n   constructor(props) {\n\n\n      super(props);\n      this.state = {\n         lng: lon,\n         lat: lat,\n         zoom: 10,\n         thread: \"not loaded\"\n\n      };\n   }\n\n   /*----------------------------------------------------------------------\n   ------------------------------------------------------------------------\n   --------------------MAP COMPONENT MOUNTS--------------------------------\n   ------------------------------------------------------------------------\n   ------------------------------------------------------------------------\n   ------------------------------------------------------------------------\n   */\n\n   componentDidMount() { \n \n   // create geolocateControl object and set settings-- \n   // creating this GeoControl must happen before creating the map so it can be configured before it's implemented\n   // geolocate takes a couple seconds also, so giving it a headstart makes the ui less confusing as its loading\n   //var geolocate = new mapboxgl.GeolocateControl({positionOptions: {enableHighAccuracy: true}, trackUserLocation: true}); //GeolocateControl settings \n   \n   //geolocate.on('geolocate', function(e) { //on geolocate global coord position updates\n      //boone coordinates to show test markers that use html popups as examples.\n      //lon = e.coords.longitude;\n      //lat = e.coords.latitude;\n   //});\n\n   //load mapbox map with streets and styles in the mapContainer \n   const map = new mapboxgl.Map({ \n      container: this.mapContainer,\n      style: 'mapbox://styles/smithkr6/ck9jwp4v217uu1ippf9kjbzct',\n      //center: [this.state.lng, this.state.lat],\n      center: [-81.6806,36.2142],\n      zoom: 18.15,\n     // zoom: this.state.zoom,\n   });\n\n   //map.addControl(geolocate);  //must grant geolocate control to the mapbox map for positioning user \n   //map.on('load', function() { geolocate.trigger(); });  //trigger geolocate automatically\n   //alert(\"This Web Application is for experimental purposes only.\\nTo delete markers and/or comments, delete them from Reddit.\")\n\n    //when moving the map with dragging, update coordinates of center of the map\n   map.on('move', () => { \n      this.setState({\n         lng: map.getCenter().lng.toFixed(4),\n         lat: map.getCenter().lat.toFixed(4),\n         zoom: map.getZoom().toFixed(2),\n      });\n   });\n\n/*-----------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------------------------------\n------------------------------CS3490 PROGRAMMING LANGUAGES  FINAL PROJECT: --------------------------------------------\n------------------------------------------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------------------------------------------\n--------------------------------------------MAP INITIALIZER\n-------------------------------------------- get json data from the main feed of the subreddit, r/unfortunateMap.\n-------------------------------------------- this json data is extensive and to initialize the map very little data is required,\n-------------------------------------------- so the following section parses the main feed data \n-------------------------------------------- \n-------------------------------------------- this task was attempted in a functional style: \n--------------------------------------------    minimizing use of destructive variable,\n--------------------------------------------    without utilizing global variables for the scope of this parser, \n--------------------------------------------    without reassigning the values of varibles,\n--------------------------------------------    without modifying variables or modifying data structures, \n--------------------------------------------       instead passing/returning copies through functions\n--------------------------------------------\n--------------------------------------------\n--------------------------------------------\n--------------------------------------------\n--------------------------------------------\n--------------------------------------------\n*/ \n/*\n   var showCommentsBtn        = document.createElement(\"button\");                     //button for creating a marker, then confirming its position\n   showCommentsBtn.className  = \"show_comments\";                                             //className for the button; will probably end up being unnecessary cause only 1 button\n   showCommentsBtn.innerHTML  = \"<h5>Show Comments</h5>\";                                         // text displayed on the button. text will change to \"Confirm Position\" after clicked once\n   showCommentsBtn.id         = \"show_comments\";\n   showCommentsBtn.target     = '';\n   showCommentsBtn.addEventListener (\"click\", function() {   \n      updateSelectedMarker(showCommentsBtn.target);\n   });\n*/\n\n   //------------------------------\n   //parsing Post previews from main feed into map markers \n   //------------------------------\n   function cleanUp(txt) {\n      if (keepLine(getLine(txt)))   return getLine(txt) + cleanUp(removeTopLine(txt));\n      else                          return cleanUp(removeTopLine(txt));\n   }\n   function keepLine(line) {\n      if  (line.includes('\"author\"'))   return true;\n      if  (line.includes('\"title\"'))    return true;\n      if  (line.includes('\"selftext\"')) return true;\n   }\n   function getLine(txt) {\n      //return txt.split('\\n', 1) + '\\n'; //this works \n      if (txt[0]!== '\\n') return txt[0] + getLine(txt.substring(1));\n      else return '\\n';\n   }\n   function removeTopLine(txt) {\n      //return txt.substring(txt.indexOf(\"\\n\") + 1); this sort of works (too big on stack)\n      if (txt[0] !== '\\n') return removeTopLine(txt.substring(1));\n      else return txt.substring(1); //for this else, txt[0] == '\\n' so return whats after the \\n with txt.substring(1) \n   }\n   \n   //calculate distance b/w user coordinates and coordinates parsed out of this functions argument, str.\n   function getDistance(str) { \n      //split the str into 2 number array, coord.\n      return Math.sqrt(Math.pow((map.getCenter().lng - str.split(',')[0]),2) + Math.pow((map.getCenter().lat - str.split(',')[1]),2));\n   }\n\n    /*\n    * GRAB MAIN FEED post previews from reddit.com/r/unfortunateMap\n    *  retrieve json data for the entire feed of r/unfortunateMap\n    *  filter out the unneeded json fields \n    *  and store the leftover data in a json formatted string, strtemp.\n    *  $.getJSON is async, so going to parse what it receives in its promise\n    */\n   function grabFeedJSON(link)  {\n      return $.getJSON(link, function (dat) {\n         //return JSON.stringify(dat.data);\n      });\n   }\n\n   /*---------------------------------------------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   *----------------------MARKER PREVIEWS---------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   *-----this \"then\" will execute once grabFeedJSON has finished retrieving the json file\n   */\n   //var feed_map = new Map();\n   var strtemp = '';\n   var subreddit_link = \"https://www.reddit.com/r/unfortunateMap/.json\";\n   grabFeedJSON(subreddit_link).then(function(json_data) {                      //call function to grab entire json, then...this following function\n      $.each(json_data.data.children, function (key, marker) {    //iterate through each of \"children\" and create a new json element for each marker\n            strtemp = strtemp + ',{\"rank\":\"'    + key + '\"'                            //ordered by appearence in the main feed (don't need rank)\n                              + ',\"title\":'     + JSON.stringify(marker.data.title)    //coordinates of marker\n                              + ',\"url\":'       + JSON.stringify(marker.data.url)      //url of marker\n                              + ',\"author\":'    + JSON.stringify(marker.data.author)   //author of marker\n                              + ',\"selftext\":'  + JSON.stringify(marker.data.selftext)\n                              + ',\"dist_from\":' + getDistance(marker.data.title)   //add field for distance from user\n                              + '}';\n      });\n\n      strtemp =  '({\"marker_previews\":[' + strtemp.substring(1) + ']})'; //substring just for removing preceding comma\n      console.log(strtemp);\n      var new_json = eval(\"(\" + strtemp + \")\");      //convert the string to json w/ \"eval\", then format it nicely to a string.\n      \n\n     \n      //populate the map with markers\n      $.each(new_json.marker_previews, function (i, marker) {\n         var el = document.createElement('div');\n         el.className = 'marker';\n         var parsed = marker.title.split(',');   //convert string to coordinates\n         var mark = new mapboxgl.Marker(el);\n         var tempp = document.createElement(\"button\");\n         tempp.className   = marker.title.toString();                                             //className for the button; will probably end up being unnecessary cause only 1 button\n         tempp.id          = marker.title.toString();\n         tempp.innerHTML   = \"<h5>Show Comments</h5>\";                                         // text displayed on the button. text will change to \"Confirm Position\" after clicked once\n         tempp.target      = marker.url + '.json';\n         tempp.onclick = function () {\n            if (tempp.innerHTML===\"<h5>Show Comments</h5>\") {\n               tempp.innerHTML=\"<h5>Hide Comments</h5>\";\n            }\n            else if (tempp.innerHTML===\"<h5>Hide Comments</h5>\") tempp.innerHTML=\"<h5>Show Comments</h5>\";\n            updateSelectedMarker(tempp.target);\n            console.log(\"CLICKED\");\n         }\n         var tempp2 = document.createElement(\"div\");\n         tempp2.className  = 'section' + marker.title.toString();\n         tempp2.id         = 'section' + marker.title.toString();\n         tempp2.innerHTML = \"<body><h3><b><i>\" + marker.title  + '</i><br><sub>' + marker.author + '</sub></b></h3><p>' + marker.selftext + '</p><p><a href=\"' + marker.url + '\" target=_blank\">comment</a></p></body>';\n         tempp2.appendChild(tempp);\n         \n         mark.setLngLat(parsed)\n            .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups to markers\n            .setDOMContent(tempp2))\n            .addTo(map);\n            });\n\n         //for (const k of feed_map.keys()) {\n         //   feed_map.get(k).addTo(map);\n         // }\n   \n      });\n\n         \n\n   \n         \n   /*---------------------------------------------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   *---------------------SELECTED MARKER COMMENTS--------------------------------------------------------\n   *--------------------------CONVERT JSON TO HTML -----------------------------------------\n   *----------------------------------------------------------------------------------------\n   *------------when marker clicked get full marker data------------------------------------\n   *----------------------------------------------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   */   \n   var markerpost = {\"title\": \"\", \"author\": \"\", \"body\": \"\", \"replies\": []};   //get comments and display\n\n      //FUNCTIONS\n      //function that grabs json of a marker post url\n   function grabMarkerJSON(link)  {\n      return $.getJSON(link, function (dat) {\n        // return JSON.stringify(dat);\n      });\n   }\n\n      //because the request is async, scoping the functional logic within the .then of the grabMarkerJSON function--\n      //the json returned by grabMarkerJson is passed as the argument the .then inline function as json_data.\n   function updateSelectedMarker(url){\n      console.log(\"updateSelectedMarker reached\");\n      grabMarkerJSON(url).then(function(json_data) {               //this is \"main\" function for the functional json to HTML converter\n\n         markerpost = { \n                        title : json_data[0].data.children[0].data.title,   //title   \n                        author : json_data[0].data.children[0].data.author,     //author\n                        body : json_data[0].data.children[0].data.selftext   //body\n                     };\n         \n\n\n         //recursive JSON sorting algorithm alphabetically by property (key)\n         function sortObject(obj) {\n            if(typeof obj !== 'object')   return obj;\n               var temp = {};\n               var keys = [];\n               for(var key in obj)\n                  keys.push(key);\n               keys.sort();\n               for(var index in keys)\n                 temp[keys[index]] = sortObject(obj[keys[index]]);       \n               return temp;\n         }\n         //line parsers (intended for a single line)\n\n         function authorLine(str) {\n            //first split is incase an author has a quot in their name \n            //split splits the string by quot characters into an array\n            //slice(3) returns a new array of its elements from index 3 to the last \n            //last slice  slices last quotation and a comma off end of string\n            if (removeSpaces(str).substring(0, 8) ===  '\"author\"')  return str.split('\\\\\"').join('\"').split('\"').slice(3).join('\"').slice(0,-1); \n            else return \"\";\n         }\n\n         function bodyLine(str) {\n            if (removeSpaces(str).substring(0, 6) ===  '\"body\"') return str.split('\\\\\"').join('\"').split('\"').slice(3).join('\"').slice(0,-1);   \n            else return \"\";\n         }\n         function removeComma(str) {\n            if (str[str.length-1] === ',') return str.substring(0,str.length-1); //if last char is comman return string w/o last char\n            else return str;\n         } \n         //full string parsers (intended for multiple lines)\n         function removeSpaces(str) {         \n            if (str === undefined) return \"\";\n            else {\n               return str.split(\" \").join(\"\");\n            }\n         }\n\n         /*returns true if it's fed string that is a desired property:\n            author, body, replies, or {, or }      */\n         function isKeeper(str) {\n            if (\n                  str !== undefined       ||\n                  authorLine(str) !== \"\"  || //authorLine returns null if it doesn't start with \"author\"\n                  bodyLine(str)  !==  \"\"     //bodyLine returns null if it doesn't start with \"body\"\n               )\n               return true;\n            return false;\n         }\n\n         //TODO: recursive implementation of reValidLInes\n         //checks if each element(each line) is a keeper.\n         //argument is array of lines--each element is a str representation of json text\n         function retValidLines(iArr) {\n            if (iArr[0] === undefined) return [\"\"];\n            else if (isKeeper(iArr[0])) { \n               var lelem = removeComma(iArr.shift());      //remove last element to keep and ensure no comma at end\n               var temd = retValidLines(iArr); \n               temd.unshift(lelem);\n               return temd;                   \n            }\n\n            else {//dontkeep\n               iArr.shift();\n               return retValidLines(iArr);   //return a retry passed a copy of the array w/o the invalid element\n            }\n         }\n\n         //for retrieving n lines of a multiline string into an n element array of strings\n         //use the n argument for optimizations on larger comment threads for cache performance\n         function jsonSectionSelectToArr(json_formatted_string, n) {\n            return json_formatted_string.split('\\n', n);          //split elements at newline into an array \n         }\n\n\n         //return number of spaces that precede the first non-space character \n         function countSpaces(str) {\n            if (str[0] == ' ') return 1 + countSpaces(str.substring(1));\n            else return 0;\n         }\n\n         //swap instances of \\n with <br> for HTML formatting\n         function replaceWithHTMLbreaks(str) {\n            return str.split(\"\\n\").join(\"<br>\")\n         }\n         //\n         //pass an array. return array of elements up until an element with a different countSpaces is reached\n         function getSiblings(arr) {  \n            var i=0;\n            var spaces = countSpaces(arr[0]);\n            while(spaces === countSpaces(arr[i])) i++;\n            return arr.splice(0,i);\n            if (countSpaces(arr[0]) === countSpaces(arr[2])) return arr.slice(0, 3).concat(getSiblings(arr.slice(3,arr.length)));\n            else return;\n         }\n         //returns the html code for line breaks\n         function hrTag(thiccness) {\n            return '<hr style = display: block; margin-top: 0.5em; margin-bottom: 0.5em; margin-left: auto; margin-right: auto; border-style: inset; border-width:' + thiccness.toString() + 'px;\">';\n         }       \n         //replace preceding spaces that remain from the JSON.stringify with html tak for a block indentation of a size based on the number of spaces that were there\n         function formatHTMLComment(str) {\n            if (authorLine(str) !== \"\") return hrTag(1) + '<div style=\"color: grey;margin-left: ' + ((countSpaces(str)-3)/5).toString() + 'em;\">' + authorLine(str) + \"</div>\";\n            if (bodyLine(str) !== \"\")   return '<div style=\"color: darkblue;margin-left: ' + ((countSpaces(str)-3)/5).toString() + 'em;\">-> ' + bodyLine(str) + \"</div>\";\n         }\n         //formats the line of an \n         function commentsArrToHTMLArr(arr) {\n            if (arr[0] !== undefined) return [formatHTMLComment(arr[0])].concat(commentsArrToHTMLArr(arr.slice(1)));\n         }\n         function jsonToString(json) {\n            return JSON.stringify(json, undefined, 1);\n         }\n         function fullHTML(arr) {\n            return(     //explicitly placing the main post's title, author, and body(selftext) in HTML with the converted array html lines that was passed as an argument\n               \"<body><h3><b><i>\" + json_data[0].data.children[0].data.title  + \"</i><br><sub>\" + json_data[0].data.children[0].data.author + \"</sub></b></h3><p>\" + json_data[0].data.children[0].data.selftext + \"</p>\" + hrTag(3) +\"<p>\"  + \n               arr.slice(1).join(\"\") +\n               \"</p><body>\"\n            );\n         }\n\n         var retElement = document.getElementById('section' + json_data[0].data.children[0].data.title.toString());\n         //update the html for the comments section with the follwing compositinon of functions\n         retElement.innerHTML = fullHTML(commentsArrToHTMLArr(retValidLines(jsonSectionSelectToArr(jsonToString(sortObject(json_data))))));\n         \n         //these popups are to display the before and after data that I parsed for this project\n         popUpCal(json_data, fullHTML(commentsArrToHTMLArr(retValidLines(jsonSectionSelectToArr(jsonToString(sortObject(json_data)))))));\n         console.log(\"json data that is parsed\\n\" + JSON.stringify(json_data,undefined, 4));\n         console.log(\"fullHTML\\n\" + fullHTML(commentsArrToHTMLArr(retValidLines(jsonSectionSelectToArr(jsonToString(sortObject(json_data)))))));\n\n      });\n   }\n\n   function popUpCal(json, html){\n      console.log(\"POPUP made\");\n      alert(\"there will be 3 popups triggerd by that 'show comments' button that appears on each marker:\\n--the json data that will be parsed into html (displayed as a string)\\n--the parsed html\\n--proof that the html displays\");\n      var win1 = window.open(\"\", \"json\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=200\");\n      win1.document.body.innerText = \"----------the json data received from this marker post made to the subreddit r/unfortunateMap:\\n\" + JSON.stringify(json);\n\n      var win2 = window.open(\"\", \"rawhtml\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=200\");\n      win2.document.body.innerText += \"----------The html that was parsed from json is as follows:\\n\" + html;\n      \n      var win3 = window.open(\"\", \"html\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=200\");\n      win3.document.body.innerHTML = \"<h3><b>Proof that the html properly displays:</b><br></h3>\" + html;\n      \n   }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   \n   /*---------------------------------------------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   *----------------------USER INTERFACE----------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   *------------when marker clicked get full marker data------------------------------------\n   *----------------------------------------------------------------------------------------\n   *----------------------------------------------------------------------------------------\n   */   \n\n   var marker              = null;                                         //create variable for the mapbox marker\n   var newMarkerCoord      = null;                                         //create variable for the users chosen coordinates for the marker\n   var dumpsterName;                                                       //create variable for the field concerning the user's name of the marker\n   var dumpsterComment;                                                    //create variable for the field concerning the user's comments about the marker\n   var newMarkerBtn        = document.createElement(\"button\");                     //button for creating a marker, then confirming its position\n   newMarkerBtn.className  = \"button\";                                             //className for the button; will probably end up being unnecessary cause only 1 button\n   newMarkerBtn.innerHTML  = \"New Marker\";                                         // text displayed on the button. text will change to \"Confirm Position\" after clicked once\n   newMarkerBtn.id         = \"newMarkerBtn\";\n   var sidebarStyle        = document.getElementsByClassName(\"sidebarStyle\")[0];   // get sidebarstyle element\n   sidebarStyle.appendChild(newMarkerBtn);    \n   var popup = new mapboxgl.Popup({offset: 50})\n      /*-------------------------\n       Event handler for button \n       1st click creates a draggable marker...the user drags it where they desire\n       2nd click confirms the markers location and replaces it with an undraggable marker with text fields for: the name they choose for the marker, comments about the marker,...maybe more\n       3rd click removes the marker after the position has been confirmed\n       ----------------------------------------------------------------------------------------------------------------*/\n   newMarkerBtn.addEventListener (\"click\", function() {       \n      sidebarStyle.appendChild(newMarkerBtn); \n\n                                            // Append to sidebarStyle location\n\n      //////// ///////////// /////\n       ///////////////////// /////\n       ///////////////////// /////\n           //TODO:click on other markers from other people and edit them.\n      //////// ///////////// /////\n       ///////////////////// /////\n       ///////////////////// /////\n      /*\n        var ifrm = document.createElement('iframe');\n        ifrm.setAttribute('id', 'ifrm'); // assign an id\n\n        //document.body.appendChild(ifrm); // to place at end of document\n\n        // to place before another page element\n        var el = document.getElementById('app');\n        el.parentNode.insertBefore(ifrm, el);\n        // assign url\n        ifrm.setAttribute('src', 'https://google.com');\n\n        //var popup = new mapboxgl.Popup({ closeOnClick: false })\n        //.setLngLat([-78.84556803970278, 35.716754701322515])\n        //.setHTML('              <iframe z-index=\"9999\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" src=\"https://old.reddit.com/r/unfortunateMap/\" style=\"height:100%; background: none; border: 0px; bottom: 0px; float: none; left: 0px; margin: 0px; padding: 0px; position: absolute; right: 0px; width: 100%;\"></iframe>')\n        //.addTo(map);\n      */\n\n      //[2nd click] this \"if\" statement handles the second click of the button\n      if(marker!=null && marker.isDraggable()) {      //if marker!=null and the marker is draggable, then the user confirmed the location of the draggable marker\n         newMarkerCoord = marker.getLngLat();        //save coordinates of confirmed location\n         marker.setDraggable(false);\n         newMarkerBtn.innerHTML = \"reset\";\n         marker.setPopup(popup.setHTML('<h5> Spot Location </h5><p><'+ marker.getLngLat().lng  + ', ' + marker.getLngLat().lat + '></p><p>Say something about the dumpster</p>'))\n            .togglePopup(); \n\n         marker.setPopup(popup.setHTML('Describe this location in a <a href=\"https://old.reddit.com/r/unfortunateMap/submit?title=' + marker.getLngLat().lng  + ', ' + marker.getLngLat().lat + '&selftext=true&text = https://unfortunatemap.icu\" target=\"_blank\" >comment</a></p>'))\n            .togglePopup(); \n            \n      }\n        //[3rd click] this \"if\" statement handles the 3rd click of the button for deleting the marker with the confirmed position \n      else if(marker !=null && !marker.isDraggable()){        // once button is clicked, this executes iff the marker has been created and the position has been confirmed\n            marker.remove();                                    //removed markers are not null\n            marker.setDraggable(true);\n            marker = null;                                      //go back to conditions of marker suited for 1st click\n            newMarkerBtn.innerHTML = \"New Marker\";\n            window.location.reload();\n            return false\n            //sidebarStyle.appendChild(newMarkerBtn);\n      }\n        // [1st click]  marker is null\n      else\n      {\n         newMarkerBtn.innerHTML = \"Confirm Position\";\n         marker = new mapboxgl.Marker({draggable: true})                                     //set position beforehand so the popup window can be loaded with coordinates when marker spawns\n            .setLngLat([map.getCenter().lng, map.getCenter().lat]);\n\n         marker.setPopup(new mapboxgl.Popup({offset: 50})                                    //make new popup attached to marker and set its offset \n            .setHTML('<h3> Drag this Marker </h3><h9><p>'+ marker.getLngLat().lng  + ',\\n ' + marker.getLngLat().lat + '</p></h9>' ))    //load the html to go in popup including markers current coordinates\n         marker.addTo(map).togglePopup();                                                    //add marker to the map and trigger the popup \n            \n\n            //all while dragging the marker, the following occurs\n         marker.on('drag', () => {                                                           //while marker is being dragged, perform function instance that's denoted by and following: ()\n\n         newMarkerBtn.innerHTML = \"<h3>Confirm Position</h3>\\n<p>\"+ marker.getLngLat().lng  + ',\\n' + marker.getLngLat().lat + '</p>';             //move button\n                \n         marker.setPopup(popup                               //continuously show a new popup...\n\n                    //.setHTML('<h3> Drag this Marker </h3><h6>'+ marker.getLngLat()  + '</h6>')) //...with continuously updated coordinates...   \n            .setDOMContent(newMarkerBtn))\n            .togglePopup();                                                             //...and continuously show the popup \n         });\n      }\n   });      \n\n\n\n}\n\nrender() {\n    return (\n      <div>\n      <div className='sidebarStyle'>\n        <div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>  \n      </div>\n      <div ref={el => this.mapContainer = el} className='mapContainer' />\n      </div>\n      )\n}\n}\n\nReactDOM.render(<Application />, document.getElementById('app'));\n\n\nreportWebVitals();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}